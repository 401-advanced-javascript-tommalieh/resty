{"version":3,"sources":["components/form/form.js","components/header/header.js","components/footer/footer.js","components/results/results.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","changeHandler","e","url","target","value","setState","selectHandler","method","submitHandler","a","preventDefault","reset","fetchHandler","fetch","state","rawApiData","json","jsonApiData","console","log","results","handler","onSubmit","this","htmlFor","id","type","placeholder","onChange","name","React","Component","Header","Footer","Results","apiResult","JSON","stringify","App","handleFormResult","apiDataResult","count","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e59b148a.chunk.js","sourcesContent":["import React from 'react';\n// import Counter from '../counter/counter.js'\nimport './form.scss';\n// import Results from '../results/results.js'\n\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { url: '', method: '' }\n    }\n\n    changeHandler = (e) => {\n        const url = e.target.value;\n        this.setState({ url });\n        // console.log(url);\n    }\n    selectHandler = (e) => {\n        const method = e.target.value;\n        this.setState({method});\n        // console.log(method);\n    }\n    submitHandler = async (e) => {\n        e.preventDefault();\n        const url = '';\n        const method = '';\n        e.target.reset();\n        this.setState({url, method})\n        await this.fetchHandler(e);\n        // console.log(e.target.value);\n    }\n    fetchHandler = async (e) => {\n        try{\n        const rawApiData = await fetch(this.state.url);\n        const jsonApiData = await rawApiData.json();\n        console.log(jsonApiData.results)\n        console.log(jsonApiData)\n        this.props.handler(jsonApiData)\n    }catch(err){\n        console.log(err)\n    }\n    }\n\n    render() {\n        return (    \n            <>\n            <form onSubmit={this.submitHandler}>\n                <label htmlFor=\"url\">URL:  </label>\n                <input id='url' type='text' placeholder='Enter URL here' onChange={this.changeHandler}></input>\n                <button id='go' type='submit'>GO!</button>\n                <p>Please select your method:</p>\n                <input type=\"radio\" id=\"get\" name=\"method\" value=\"get\" onChange={this.selectHandler}></input>\n                <label htmlFor=\"get\">GET</label>\n                <input type=\"radio\" id=\"post\" name=\"method\" value=\"post\" onChange={this.selectHandler}></input>\n                <label htmlFor=\"post\">POST</label>\n                <input type=\"radio\" id=\"update\" name=\"method\" value=\"update\" onChange={this.selectHandler}></input>\n                <label htmlFor=\"update\">UPDATE</label>\n                <input type=\"radio\" id=\"delete\" name=\"method\" value=\"delete\" onChange={this.selectHandler}></input>\n                <label htmlFor=\"delete\">DELETE</label>\n           </form>\n           </>\n        )\n    }\n\n}\n\n\nexport default Form;\n","import React from 'react';\nimport './header.scss';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render(){\n    return(\n      <nav>\n        <h1>RESTy</h1>\n      </nav>\n    );\n  }\n}\n\nexport default Header;","import React from 'react';\nimport './footer.scss';\n\nclass Footer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render(){\n    return(\n      <div id='footer'>\n        <p>&copy; CodeFellows 2020</p>\n      </div>\n    );\n  }\n}\n\nexport default Footer;","import React from 'react';\n// import JSONView from 'react-json-view';\n\n\nclass Results extends React.Component {\n  render() {\n    if(this.props.apiResult.results){ \n      return (\n\n        <div id=\"formResult\">\n          <div id='json'><pre>\"Response\":{JSON.stringify(this.props.apiResult, null, 2)}</pre></div>\n        </div>\n\n      );\n    }\n    else{ \n      return (\n    \n        <div id=\"formResult2\">\n          <div id='json'></div>\n        </div>\n    \n      );\n    }\n    // if(this.props.apiResult.results){ \n    //     return (\n    //         <div id=\"formResult\">\n    //         <JSONView id=\"json-View\" src={this.props.apiResult}></JSONView>\n    //         </div>\n    //     )\n    //     }\n    //     else{ \n    //         return (\n    //             <div id=\"formResult2\">\n    //                     <div id='json'></div>\n    //             </div>\n    //         )\n    //         }\n  }\n}\n\nexport default Results;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.scss';\nimport Form from './components/form/form.js'\nimport Header from './components/header/header.js'\nimport Footer from './components/footer/footer.js'\nimport Results from './components/results/results.js'\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {count: 0, results: [], apiResult:{}};\n  }\n  handleFormResult = (apiDataResult) => {\n    console.log(apiDataResult.results);\n\n    this.setState({results: apiDataResult.results, count: apiDataResult.count, apiResult: apiDataResult});\n    console.log(this.state);\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n      <Form handler={this.handleFormResult} />\n      <Results results={this.state.results} count={this.state.count} apiResult={this.state.apiResult}/>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}