{"version":3,"sources":["components/form/form.js","components/header/header.js","components/footer/footer.js","components/results/results.js","components/history/history.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","history","changeHandler","e","url","target","value","setState","selectHandler","method","bodyChangeHandler","body","submitHandler","a","preventDefault","reset","state","console","log","getHandler","postAndPutHandler","deleteHandler","fetch","rawApiData","json","jsonApiData","results","JSON","parse","localStorage","getItem","push","response","setItem","stringify","handler","options","toUpperCase","bodyInput","headers","apiResponse","onSubmit","this","htmlFor","id","type","placeholder","onChange","name","rows","cols","React","Component","Header","to","Footer","Results","apiResult","History","key","map","query","App","handleFormResult","apiDataResult","count","className","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b94e202b.chunk.js","sourcesContent":["import React from 'react';\n// import Counter from '../counter/counter.js'\nimport './form.scss';\n// import Results from '../results/results.js'\n\n\nclass Form extends React.Component {\n    history = [];\n    constructor(props) {\n      super(props);\n      this.state = { \n        url: '',\n        method: '',\n        body: '',\n        apiResponse: '',\n      };\n      if(!JSON.parse(localStorage.getItem('history'))){\n        localStorage.setItem('history', JSON.stringify(this.history));\n      }\n    }\n\n    changeHandler = (e) => {\n      const url = e.target.value;\n      this.setState({ url });\n      // console.log(url);\n    }\n\n    selectHandler = (e) => {\n      const method = e.target.value;\n      this.setState({method});\n      // console.log(method);\n    }\n\n    bodyChangeHandler = (e) => {\n      const body = e.target.value;\n      this.setState({body});\n    }\n\n    submitHandler = async (e) => {\n      try{\n        e.preventDefault();\n        const url = '';\n        const method = '';\n        e.target.reset();\n        switch(this.state.method){\n        case 'get':\n          console.log('get');\n          await this.getHandler(e);\n          break;\n        case 'post':\n          console.log('post');\n          await this.postAndPutHandler(e);\n          break;\n        case 'put':\n          console.log('put');\n          await this.postAndPutHandler(e);\n          break;\n        case 'delete':\n          console.log('delete');\n          await this.deleteHandler(e);\n          break;\n        default:\n          await this.getHandler(e);\n        }\n        this.setState({url, method});\n      // console.log(e.target.value);\n      }catch(err){\n        console.log(err);\n      }\n    }\n\n    getHandler = async (e) => {\n      try{\n        const rawApiData = await fetch(this.state.url);\n        const jsonApiData = await rawApiData.json();\n        console.log(jsonApiData.results);\n        console.log(jsonApiData);\n        this.history = JSON.parse(localStorage.getItem('history'));\n        this.history.push({url: this.state.url, method: this.state.method, response: jsonApiData.results});\n        localStorage.setItem('history', JSON.stringify(this.history));\n        this.props.handler(jsonApiData);\n      }catch(err){\n        console.log(err);\n      }\n    }\n\n    postAndPutHandler = async (e) => {\n      try{\n        const options = {\n          method: `${this.state.method}`.toUpperCase(),\n          body: JSON.stringify(this.state.bodyInput),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        };\n        console.log(options.body);\n        const rawApiData = await fetch(this.state.url, options);\n        const jsonApiData = await rawApiData.json();\n        this.props.handler(jsonApiData);\n      }catch(err){\n        console.log(err);\n      }\n    }\n\n    deleteHandler = async (e) => {\n      try{\n        const options = {\n          method: `${this.state.method}`.toUpperCase(),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        };\n        const rawApiData = await fetch(this.state.url, options);\n        const jsonApiData = await rawApiData.json();\n        this.props.handler(jsonApiData);\n      }catch(err){\n        console.log(err);\n      }\n    }\n    \n    \n\n    render() {\n      return (    \n        <>\n          <form onSubmit={this.submitHandler}>\n            <label htmlFor=\"url\">URL:  </label>\n            <input id='url' type='text' placeholder='Enter URL here' onChange={this.changeHandler}></input>\n            <button id='go' type='submit'>GO!</button>\n            <p>Please select your method:</p>\n            <input type=\"radio\" id=\"get\" name=\"method\" value=\"get\" onChange={this.selectHandler}></input>\n            <label htmlFor=\"get\">GET</label>\n            <input type=\"radio\" id=\"post\" name=\"method\" value=\"post\" onChange={this.selectHandler}></input>\n            <label htmlFor=\"post\">POST</label>\n            <input type=\"radio\" id=\"update\" name=\"method\" value=\"update\" onChange={this.selectHandler}></input>\n            <label htmlFor=\"update\">UPDATE</label>\n            <input type=\"radio\" id=\"delete\" name=\"method\" value=\"delete\" onChange={this.selectHandler}></input>\n            <label htmlFor=\"delete\">DELETE</label>\n            <br></br>\n            <br></br>\n            <br></br>\n            <textarea id=\"jsonBody\" name=\"requestBody\" rows=\"10\" cols=\"100\" onChange={this.bodyChangeHandler}></textarea>\n          </form>\n        </>\n      );\n    }\n\n}\n\n\nexport default Form;\n","import React from 'react';\nimport './header.scss';\nimport {Link, NavLink} from 'react-router-dom';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render(){\n    return(\n      <nav>\n        <h1>RESTy</h1>\n        <ul>\n          <li>\n            <Link to='/'>Home</Link>\n          </li>\n          <li>\n            <NavLink to='/history'>History</NavLink>\n          </li>\n\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Header;","import React from 'react';\nimport './footer.scss';\n\nclass Footer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render(){\n    return(\n      <div id='footer'>\n        <p>&copy; CodeFellows 2020</p>\n      </div>\n    );\n  }\n}\n\nexport default Footer;","import React from 'react';\n// import JSONView from 'react-json-view';\n\n\nclass Results extends React.Component {\n  render() {\n    if(this.props.apiResult.results){ \n      return (\n        <>\n          <div id=\"formResult\">\n            <div id='json'><pre>\"Response\":{JSON.stringify(this.props.apiResult, null, 2)}</pre></div>\n          </div>\n          <br></br>\n          <br></br>\n          <br></br>\n        </>\n        \n\n      );\n    }\n    else{ \n      return (\n        <>\n          <div id=\"formResult2\">\n            <div id='json'></div>\n          </div>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n        </>\n    \n      );\n    }\n    // if(this.props.apiResult.results){ \n    //     return (\n    //         <div id=\"formResult\">\n    //         <JSONView id=\"json-View\" src={this.props.apiResult}></JSONView>\n    //         </div>\n    //     )\n    //     }\n    //     else{ \n    //         return (\n    //             <div id=\"formResult2\">\n    //                     <div id='json'></div>\n    //             </div>\n    //         )\n    //         }\n  }\n}\n\nexport default Results;","import React from 'react';\n\nclass History extends React.Component{\n  key = 0;\n  constructor(props){\n    super(props);\n    this.state = {history:[], key:1};\n  }\n\n  componentDidMount(){\n    const history = JSON.parse(localStorage.getItem('history'));\n    console.log(history);\n    this.setState({history});\n  }\n\n\n  render(){\n    return(\n      <ul>\n        {\n          this.state.history.map(query => {\n            this.key = this.key + 1;\n            return <li key={this.key}>\n              <span>{query.method}</span><span>{query.url}</span>\n              <div><pre>\"Response\":{JSON.stringify(query.response, null, 2)}</pre></div>\n            </li>;\n          })\n        }\n      </ul>\n    );\n  }\n\n}\n\nexport default History;","import React from 'react';\nimport {Route} from 'react-router-dom';\n// import logo from './logo.svg';\nimport './App.scss';\nimport Form from './components/form/form.js';\nimport Header from './components/header/header.js';\nimport Footer from './components/footer/footer.js';\nimport Results from './components/results/results.js';\nimport History from './components/history/history.js';\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      count: 0,\n      results: [],\n      apiResult:{}};\n\n  }\n  handleFormResult = (apiDataResult) => {\n    console.log(apiDataResult.results);\n\n    this.setState({results: apiDataResult.results, count: apiDataResult.count, apiResult: apiDataResult});\n    console.log(this.state);\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header />\n        <Route exact path='/'>\n          <main>\n            <Form handler={this.handleFormResult} />\n            <Results results={this.state.results} count={this.state.count} apiResult={this.state.apiResult}/>\n          </main>\n        </Route>\n        <Route exact path='/history'>\n          <main>\n            <History />\n          </main>\n        </Route>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>\n  ,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}